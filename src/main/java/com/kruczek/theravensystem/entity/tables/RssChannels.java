/*
 * This file is generated by jOOQ.
 */
package com.kruczek.theravensystem.entity.tables;


import com.kruczek.theravensystem.entity.Keys;
import com.kruczek.theravensystem.entity.Public;
import com.kruczek.theravensystem.entity.enums.RssChannelsRssType;
import com.kruczek.theravensystem.entity.tables.records.RssChannelsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RssChannels extends TableImpl<RssChannelsRecord> {

    private static final long serialVersionUID = 215750874;

    /**
     * The reference instance of <code>PUBLIC.RSS_CHANNELS</code>
     */
    public static final RssChannels RSS_CHANNELS = new RssChannels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RssChannelsRecord> getRecordType() {
        return RssChannelsRecord.class;
    }

    /**
     * The column <code>PUBLIC.RSS_CHANNELS.ID</code>.
     */
    public final TableField<RssChannelsRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.RSS_CHANNELS.URL</code>.
     */
    public final TableField<RssChannelsRecord, String> URL = createField(DSL.name("URL"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.RSS_CHANNELS.RSS_TYPE</code>.
     */
    public final TableField<RssChannelsRecord, RssChannelsRssType> RSS_TYPE = createField(DSL.name("RSS_TYPE"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.kruczek.theravensystem.entity.enums.RssChannelsRssType.class), this, "");

    /**
     * Create a <code>PUBLIC.RSS_CHANNELS</code> table reference
     */
    public RssChannels() {
        this(DSL.name("RSS_CHANNELS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.RSS_CHANNELS</code> table reference
     */
    public RssChannels(String alias) {
        this(DSL.name(alias), RSS_CHANNELS);
    }

    /**
     * Create an aliased <code>PUBLIC.RSS_CHANNELS</code> table reference
     */
    public RssChannels(Name alias) {
        this(alias, RSS_CHANNELS);
    }

    private RssChannels(Name alias, Table<RssChannelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RssChannels(Name alias, Table<RssChannelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RssChannels(Table<O> child, ForeignKey<O, RssChannelsRecord> key) {
        super(child, key, RSS_CHANNELS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RssChannelsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<RssChannelsRecord>> getKeys() {
        return Arrays.<UniqueKey<RssChannelsRecord>>asList(Keys.CONSTRAINT_7);
    }

    @Override
    public RssChannels as(String alias) {
        return new RssChannels(DSL.name(alias), this);
    }

    @Override
    public RssChannels as(Name alias) {
        return new RssChannels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RssChannels rename(String name) {
        return new RssChannels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RssChannels rename(Name name) {
        return new RssChannels(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, RssChannelsRssType> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
